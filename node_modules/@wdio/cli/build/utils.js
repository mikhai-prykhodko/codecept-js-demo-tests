"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLauncher = getLauncher;
exports.runServiceHook = runServiceHook;
exports.filterPackageName = filterPackageName;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("@wdio/logger"));

var _config = require("@wdio/config");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _logger.default)('wdio-cli:utils');
/**
 * loads launch services
 */

function getLauncher(config) {
  let launchServices = [];

  if (!Array.isArray(config.services)) {
    return launchServices;
  }

  for (let serviceName of config.services) {
    let launcher;
    /**
     * allow custom services
     */

    if (typeof serviceName === 'object') {
      const {
        onPrepare,
        onComplete
      } = serviceName;
      launchServices.push({
        onPrepare,
        onComplete
      });
      continue;
    }

    try {
      const Launcher = (0, _config.initialisePlugin)(serviceName, 'service', 'launcher');
      /**
       * abort if service has no launcher
       */

      if (!Launcher) {
        continue;
      }

      launcher = new Launcher();
    } catch (e) {
      if (!e.message.match('Couldn\'t find plugin')) {
        throw new Error(`Couldn't initialise launcher from service "${serviceName}".\n${e.stack}`);
      }
    }

    if (launcher && (typeof launcher.onPrepare === 'function' || typeof launcher.onComplete === 'function')) {
      const {
        onPrepare,
        onComplete
      } = launcher;
      launchServices.push({
        onPrepare,
        onComplete
      });
    }
  }

  return launchServices;
}
/**
 * run service launch sequences
 */


async function runServiceHook(launcher, hookName, ...args) {
  try {
    return await Promise.all(launcher.map(service => {
      if (typeof service[hookName] === 'function') {
        return service[hookName](...args);
      }
    }));
  } catch (e) {
    log.error(`A service failed in the '${hookName}' hook\n${e.stack}\n\nContinue...`);
  }
}
/**
 * map package names
 */


function filterPackageName(type) {
  return pkgLabels => pkgLabels.map(pkgLabel => pkgLabel.trim().includes('@wdio') ? `@wdio/${pkgLabel.split(/- /)[0].trim()}-${type}` : `wdio-${pkgLabel.split(/- /)[0].trim()}-${type}`);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy5qcyJdLCJuYW1lcyI6WyJsb2ciLCJnZXRMYXVuY2hlciIsImNvbmZpZyIsImxhdW5jaFNlcnZpY2VzIiwiQXJyYXkiLCJpc0FycmF5Iiwic2VydmljZXMiLCJzZXJ2aWNlTmFtZSIsImxhdW5jaGVyIiwib25QcmVwYXJlIiwib25Db21wbGV0ZSIsInB1c2giLCJMYXVuY2hlciIsImUiLCJtZXNzYWdlIiwibWF0Y2giLCJFcnJvciIsInN0YWNrIiwicnVuU2VydmljZUhvb2siLCJob29rTmFtZSIsImFyZ3MiLCJQcm9taXNlIiwiYWxsIiwibWFwIiwic2VydmljZSIsImVycm9yIiwiZmlsdGVyUGFja2FnZU5hbWUiLCJ0eXBlIiwicGtnTGFiZWxzIiwicGtnTGFiZWwiLCJ0cmltIiwiaW5jbHVkZXMiLCJzcGxpdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUVBLE1BQU1BLEdBQUcsR0FBRyxxQkFBTyxnQkFBUCxDQUFaO0FBRUE7Ozs7QUFHTyxTQUFTQyxXQUFULENBQXNCQyxNQUF0QixFQUE4QjtBQUNqQyxNQUFJQyxjQUFjLEdBQUcsRUFBckI7O0FBRUEsTUFBSSxDQUFDQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0gsTUFBTSxDQUFDSSxRQUFyQixDQUFMLEVBQXFDO0FBQ2pDLFdBQU9ILGNBQVA7QUFDSDs7QUFFRCxPQUFLLElBQUlJLFdBQVQsSUFBd0JMLE1BQU0sQ0FBQ0ksUUFBL0IsRUFBeUM7QUFDckMsUUFBSUUsUUFBSjtBQUVBOzs7O0FBR0EsUUFBSSxPQUFPRCxXQUFQLEtBQXVCLFFBQTNCLEVBQXFDO0FBQ2pDLFlBQU07QUFBRUUsUUFBQUEsU0FBRjtBQUFhQyxRQUFBQTtBQUFiLFVBQTRCSCxXQUFsQztBQUNBSixNQUFBQSxjQUFjLENBQUNRLElBQWYsQ0FBb0I7QUFBRUYsUUFBQUEsU0FBRjtBQUFhQyxRQUFBQTtBQUFiLE9BQXBCO0FBQ0E7QUFDSDs7QUFFRCxRQUFJO0FBQ0EsWUFBTUUsUUFBUSxHQUFHLDhCQUFpQkwsV0FBakIsRUFBOEIsU0FBOUIsRUFBeUMsVUFBekMsQ0FBakI7QUFFQTs7OztBQUdBLFVBQUksQ0FBQ0ssUUFBTCxFQUFlO0FBQ1g7QUFDSDs7QUFFREosTUFBQUEsUUFBUSxHQUFHLElBQUlJLFFBQUosRUFBWDtBQUNILEtBWEQsQ0FXRSxPQUFPQyxDQUFQLEVBQVU7QUFDUixVQUFJLENBQUNBLENBQUMsQ0FBQ0MsT0FBRixDQUFVQyxLQUFWLENBQWdCLHVCQUFoQixDQUFMLEVBQStDO0FBQzNDLGNBQU0sSUFBSUMsS0FBSixDQUFXLDhDQUE2Q1QsV0FBWSxPQUFNTSxDQUFDLENBQUNJLEtBQU0sRUFBbEYsQ0FBTjtBQUNIO0FBQ0o7O0FBRUQsUUFBSVQsUUFBUSxLQUFLLE9BQU9BLFFBQVEsQ0FBQ0MsU0FBaEIsS0FBOEIsVUFBOUIsSUFBNEMsT0FBT0QsUUFBUSxDQUFDRSxVQUFoQixLQUErQixVQUFoRixDQUFaLEVBQXlHO0FBQ3JHLFlBQU07QUFBRUQsUUFBQUEsU0FBRjtBQUFhQyxRQUFBQTtBQUFiLFVBQTRCRixRQUFsQztBQUNBTCxNQUFBQSxjQUFjLENBQUNRLElBQWYsQ0FBb0I7QUFBRUYsUUFBQUEsU0FBRjtBQUFhQyxRQUFBQTtBQUFiLE9BQXBCO0FBQ0g7QUFDSjs7QUFFRCxTQUFPUCxjQUFQO0FBQ0g7QUFFRDs7Ozs7QUFHTyxlQUFlZSxjQUFmLENBQStCVixRQUEvQixFQUF5Q1csUUFBekMsRUFBbUQsR0FBR0MsSUFBdEQsRUFBNEQ7QUFDL0QsTUFBSTtBQUNBLFdBQU8sTUFBTUMsT0FBTyxDQUFDQyxHQUFSLENBQVlkLFFBQVEsQ0FBQ2UsR0FBVCxDQUFjQyxPQUFELElBQWE7QUFDL0MsVUFBSSxPQUFPQSxPQUFPLENBQUNMLFFBQUQsQ0FBZCxLQUE2QixVQUFqQyxFQUE2QztBQUN6QyxlQUFPSyxPQUFPLENBQUNMLFFBQUQsQ0FBUCxDQUFrQixHQUFHQyxJQUFyQixDQUFQO0FBQ0g7QUFDSixLQUp3QixDQUFaLENBQWI7QUFLSCxHQU5ELENBTUUsT0FBT1AsQ0FBUCxFQUFVO0FBQ1JiLElBQUFBLEdBQUcsQ0FBQ3lCLEtBQUosQ0FBVyw0QkFBMkJOLFFBQVMsV0FBVU4sQ0FBQyxDQUFDSSxLQUFNLGlCQUFqRTtBQUNIO0FBQ0o7QUFFRDs7Ozs7QUFHTyxTQUFTUyxpQkFBVCxDQUE0QkMsSUFBNUIsRUFBa0M7QUFDckMsU0FBUUMsU0FBRCxJQUFlQSxTQUFTLENBQUNMLEdBQVYsQ0FDakJNLFFBQUQsSUFBY0EsUUFBUSxDQUFDQyxJQUFULEdBQWdCQyxRQUFoQixDQUF5QixPQUF6QixJQUNQLFNBQVFGLFFBQVEsQ0FBQ0csS0FBVCxDQUFlLElBQWYsRUFBcUIsQ0FBckIsRUFBd0JGLElBQXhCLEVBQStCLElBQUdILElBQUssRUFEeEMsR0FFUCxRQUFPRSxRQUFRLENBQUNHLEtBQVQsQ0FBZSxJQUFmLEVBQXFCLENBQXJCLEVBQXdCRixJQUF4QixFQUErQixJQUFHSCxJQUFLLEVBSG5DLENBQXRCO0FBSUgiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nZ2VyIGZyb20gJ0B3ZGlvL2xvZ2dlcidcbmltcG9ydCB7IGluaXRpYWxpc2VQbHVnaW4gfSBmcm9tICdAd2Rpby9jb25maWcnXG5cbmNvbnN0IGxvZyA9IGxvZ2dlcignd2Rpby1jbGk6dXRpbHMnKVxuXG4vKipcbiAqIGxvYWRzIGxhdW5jaCBzZXJ2aWNlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGF1bmNoZXIgKGNvbmZpZykge1xuICAgIGxldCBsYXVuY2hTZXJ2aWNlcyA9IFtdXG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoY29uZmlnLnNlcnZpY2VzKSkge1xuICAgICAgICByZXR1cm4gbGF1bmNoU2VydmljZXNcbiAgICB9XG5cbiAgICBmb3IgKGxldCBzZXJ2aWNlTmFtZSBvZiBjb25maWcuc2VydmljZXMpIHtcbiAgICAgICAgbGV0IGxhdW5jaGVyXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFsbG93IGN1c3RvbSBzZXJ2aWNlc1xuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHR5cGVvZiBzZXJ2aWNlTmFtZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgb25QcmVwYXJlLCBvbkNvbXBsZXRlIH0gPSBzZXJ2aWNlTmFtZVxuICAgICAgICAgICAgbGF1bmNoU2VydmljZXMucHVzaCh7IG9uUHJlcGFyZSwgb25Db21wbGV0ZSB9KVxuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBMYXVuY2hlciA9IGluaXRpYWxpc2VQbHVnaW4oc2VydmljZU5hbWUsICdzZXJ2aWNlJywgJ2xhdW5jaGVyJylcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBhYm9ydCBpZiBzZXJ2aWNlIGhhcyBubyBsYXVuY2hlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoIUxhdW5jaGVyKSB7XG4gICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGF1bmNoZXIgPSBuZXcgTGF1bmNoZXIoKVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoIWUubWVzc2FnZS5tYXRjaCgnQ291bGRuXFwndCBmaW5kIHBsdWdpbicpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZG4ndCBpbml0aWFsaXNlIGxhdW5jaGVyIGZyb20gc2VydmljZSBcIiR7c2VydmljZU5hbWV9XCIuXFxuJHtlLnN0YWNrfWApXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGF1bmNoZXIgJiYgKHR5cGVvZiBsYXVuY2hlci5vblByZXBhcmUgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGxhdW5jaGVyLm9uQ29tcGxldGUgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAgICAgICBjb25zdCB7IG9uUHJlcGFyZSwgb25Db21wbGV0ZSB9ID0gbGF1bmNoZXJcbiAgICAgICAgICAgIGxhdW5jaFNlcnZpY2VzLnB1c2goeyBvblByZXBhcmUsIG9uQ29tcGxldGUgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsYXVuY2hTZXJ2aWNlc1xufVxuXG4vKipcbiAqIHJ1biBzZXJ2aWNlIGxhdW5jaCBzZXF1ZW5jZXNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJ1blNlcnZpY2VIb29rIChsYXVuY2hlciwgaG9va05hbWUsIC4uLmFyZ3MpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgUHJvbWlzZS5hbGwobGF1bmNoZXIubWFwKChzZXJ2aWNlKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNlcnZpY2VbaG9va05hbWVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2VbaG9va05hbWVdKC4uLmFyZ3MpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgbG9nLmVycm9yKGBBIHNlcnZpY2UgZmFpbGVkIGluIHRoZSAnJHtob29rTmFtZX0nIGhvb2tcXG4ke2Uuc3RhY2t9XFxuXFxuQ29udGludWUuLi5gKVxuICAgIH1cbn1cblxuLyoqXG4gKiBtYXAgcGFja2FnZSBuYW1lc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyUGFja2FnZU5hbWUgKHR5cGUpIHtcbiAgICByZXR1cm4gKHBrZ0xhYmVscykgPT4gcGtnTGFiZWxzLm1hcChcbiAgICAgICAgKHBrZ0xhYmVsKSA9PiBwa2dMYWJlbC50cmltKCkuaW5jbHVkZXMoJ0B3ZGlvJylcbiAgICAgICAgICAgID8gYEB3ZGlvLyR7cGtnTGFiZWwuc3BsaXQoLy0gLylbMF0udHJpbSgpfS0ke3R5cGV9YFxuICAgICAgICAgICAgOiBgd2Rpby0ke3BrZ0xhYmVsLnNwbGl0KC8tIC8pWzBdLnRyaW0oKX0tJHt0eXBlfWApXG59XG4iXX0=