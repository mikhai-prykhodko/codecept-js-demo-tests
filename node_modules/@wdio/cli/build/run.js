"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = run;

require("source-map-support/register");

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _logger = _interopRequireDefault(require("@wdio/logger"));

var _launcher = _interopRequireDefault(require("./launcher.js"));

var _watcher = _interopRequireDefault(require("./watcher"));

var _setup = _interopRequireDefault(require("./setup"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _logger.default)('wdio-cli:run');

function run(params) {
  let stdinData = '';
  const firstArgument = params._[0];

  const commands = _fs.default.readdirSync(_path.default.join(__dirname, 'commands')).map(file => _path.default.parse(file).name);

  const localConf = _path.default.join(process.cwd(), 'wdio.conf.js');

  const wdioConf = firstArgument || (_fs.default.existsSync(localConf) ? localConf : null);
  /**
   * don't do anything if command handler is triggered
   */

  if (commands.includes(firstArgument)) {
    return;
  }
  /**
   * if no default wdio.conf was found and no path to a wdio config was specified
   * run the setup
   */


  if (!wdioConf || firstArgument === 'config') {
    return (0, _setup.default)();
  }
  /**
   * if `--watch` param is set, run launcher in watch mode
   */


  if (params.watch) {
    const watcher = new _watcher.default(wdioConf, params);
    return watcher.watch();
  }
  /**
   * if stdin.isTTY, then no piped input is present and launcher should be
   * called immediately, otherwise piped input is processed, expecting
   * a list of files to process.
   *
   * stdin.isTTY is false when command is from nodes spawn since it's treated as a pipe
   */


  if (process.stdin.isTTY || !process.stdout.isTTY) {
    return launch(wdioConf, params);
  }
  /*
   * get a list of spec files to run from stdin, overriding any other
   * configuration suite or specs.
   */


  const stdin = process.openStdin();
  stdin.setEncoding('utf8');
  stdin.on('data', data => {
    stdinData += data;
  });
  stdin.on('end', () => {
    if (stdinData.length > 0) {
      params.specs = stdinData.trim().split(/\r?\n/);
    }

    launch(wdioConf, params);
  });
}

function launch(wdioConf, params) {
  log.debug('Run suite with config', wdioConf, 'and params', params);
  let launcher = new _launcher.default(wdioConf, params);
  launcher.run().then(code => process.exit(code), e => process.nextTick(() => {
    throw e;
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ydW4uanMiXSwibmFtZXMiOlsibG9nIiwicnVuIiwicGFyYW1zIiwic3RkaW5EYXRhIiwiZmlyc3RBcmd1bWVudCIsIl8iLCJjb21tYW5kcyIsImZzIiwicmVhZGRpclN5bmMiLCJwYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsIm1hcCIsImZpbGUiLCJwYXJzZSIsIm5hbWUiLCJsb2NhbENvbmYiLCJwcm9jZXNzIiwiY3dkIiwid2Rpb0NvbmYiLCJleGlzdHNTeW5jIiwiaW5jbHVkZXMiLCJ3YXRjaCIsIndhdGNoZXIiLCJXYXRjaGVyIiwic3RkaW4iLCJpc1RUWSIsInN0ZG91dCIsImxhdW5jaCIsIm9wZW5TdGRpbiIsInNldEVuY29kaW5nIiwib24iLCJkYXRhIiwibGVuZ3RoIiwic3BlY3MiLCJ0cmltIiwic3BsaXQiLCJkZWJ1ZyIsImxhdW5jaGVyIiwiTGF1bmNoZXIiLCJ0aGVuIiwiY29kZSIsImV4aXQiLCJlIiwibmV4dFRpY2siXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUEsR0FBRyxHQUFHLHFCQUFPLGNBQVAsQ0FBWjs7QUFFZSxTQUFTQyxHQUFULENBQWNDLE1BQWQsRUFBc0I7QUFDakMsTUFBSUMsU0FBUyxHQUFHLEVBQWhCO0FBRUEsUUFBTUMsYUFBYSxHQUFHRixNQUFNLENBQUNHLENBQVAsQ0FBUyxDQUFULENBQXRCOztBQUNBLFFBQU1DLFFBQVEsR0FBR0MsWUFBR0MsV0FBSCxDQUFlQyxjQUFLQyxJQUFMLENBQVVDLFNBQVYsRUFBcUIsVUFBckIsQ0FBZixFQUFpREMsR0FBakQsQ0FBc0RDLElBQUQsSUFBVUosY0FBS0ssS0FBTCxDQUFXRCxJQUFYLEVBQWlCRSxJQUFoRixDQUFqQjs7QUFDQSxRQUFNQyxTQUFTLEdBQUdQLGNBQUtDLElBQUwsQ0FBVU8sT0FBTyxDQUFDQyxHQUFSLEVBQVYsRUFBeUIsY0FBekIsQ0FBbEI7O0FBQ0EsUUFBTUMsUUFBUSxHQUFHZixhQUFhLEtBQUtHLFlBQUdhLFVBQUgsQ0FBY0osU0FBZCxJQUEyQkEsU0FBM0IsR0FBdUMsSUFBNUMsQ0FBOUI7QUFFQTs7OztBQUdBLE1BQUlWLFFBQVEsQ0FBQ2UsUUFBVCxDQUFrQmpCLGFBQWxCLENBQUosRUFBc0M7QUFDbEM7QUFDSDtBQUVEOzs7Ozs7QUFJQSxNQUFJLENBQUNlLFFBQUQsSUFBYWYsYUFBYSxLQUFLLFFBQW5DLEVBQTZDO0FBQ3pDLFdBQU8scUJBQVA7QUFDSDtBQUVEOzs7OztBQUdBLE1BQUlGLE1BQU0sQ0FBQ29CLEtBQVgsRUFBa0I7QUFDZCxVQUFNQyxPQUFPLEdBQUcsSUFBSUMsZ0JBQUosQ0FBWUwsUUFBWixFQUFzQmpCLE1BQXRCLENBQWhCO0FBQ0EsV0FBT3FCLE9BQU8sQ0FBQ0QsS0FBUixFQUFQO0FBQ0g7QUFFRDs7Ozs7Ozs7O0FBT0EsTUFBSUwsT0FBTyxDQUFDUSxLQUFSLENBQWNDLEtBQWQsSUFBdUIsQ0FBQ1QsT0FBTyxDQUFDVSxNQUFSLENBQWVELEtBQTNDLEVBQWtEO0FBQzlDLFdBQU9FLE1BQU0sQ0FBQ1QsUUFBRCxFQUFXakIsTUFBWCxDQUFiO0FBQ0g7QUFFRDs7Ozs7O0FBSUEsUUFBTXVCLEtBQUssR0FBR1IsT0FBTyxDQUFDWSxTQUFSLEVBQWQ7QUFDQUosRUFBQUEsS0FBSyxDQUFDSyxXQUFOLENBQWtCLE1BQWxCO0FBQ0FMLEVBQUFBLEtBQUssQ0FBQ00sRUFBTixDQUFTLE1BQVQsRUFBa0JDLElBQUQsSUFBVTtBQUN2QjdCLElBQUFBLFNBQVMsSUFBSTZCLElBQWI7QUFDSCxHQUZEO0FBR0FQLEVBQUFBLEtBQUssQ0FBQ00sRUFBTixDQUFTLEtBQVQsRUFBZ0IsTUFBTTtBQUNsQixRQUFJNUIsU0FBUyxDQUFDOEIsTUFBVixHQUFtQixDQUF2QixFQUEwQjtBQUN0Qi9CLE1BQUFBLE1BQU0sQ0FBQ2dDLEtBQVAsR0FBZS9CLFNBQVMsQ0FBQ2dDLElBQVYsR0FBaUJDLEtBQWpCLENBQXVCLE9BQXZCLENBQWY7QUFDSDs7QUFDRFIsSUFBQUEsTUFBTSxDQUFDVCxRQUFELEVBQVdqQixNQUFYLENBQU47QUFDSCxHQUxEO0FBTUg7O0FBRUQsU0FBUzBCLE1BQVQsQ0FBaUJULFFBQWpCLEVBQTJCakIsTUFBM0IsRUFBbUM7QUFDL0JGLEVBQUFBLEdBQUcsQ0FBQ3FDLEtBQUosQ0FBVSx1QkFBVixFQUFtQ2xCLFFBQW5DLEVBQTZDLFlBQTdDLEVBQTJEakIsTUFBM0Q7QUFDQSxNQUFJb0MsUUFBUSxHQUFHLElBQUlDLGlCQUFKLENBQWFwQixRQUFiLEVBQXVCakIsTUFBdkIsQ0FBZjtBQUNBb0MsRUFBQUEsUUFBUSxDQUFDckMsR0FBVCxHQUFldUMsSUFBZixDQUNLQyxJQUFELElBQVV4QixPQUFPLENBQUN5QixJQUFSLENBQWFELElBQWIsQ0FEZCxFQUVLRSxDQUFELElBQU8xQixPQUFPLENBQUMyQixRQUFSLENBQWlCLE1BQU07QUFBRSxVQUFNRCxDQUFOO0FBQVMsR0FBbEMsQ0FGWDtBQUdIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzJ1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcbmltcG9ydCBsb2dnZXIgZnJvbSAnQHdkaW8vbG9nZ2VyJ1xuXG5pbXBvcnQgTGF1bmNoZXIgZnJvbSAnLi9sYXVuY2hlci5qcydcbmltcG9ydCBXYXRjaGVyIGZyb20gJy4vd2F0Y2hlcidcbmltcG9ydCBzZXR1cCBmcm9tICcuL3NldHVwJ1xuXG5jb25zdCBsb2cgPSBsb2dnZXIoJ3dkaW8tY2xpOnJ1bicpXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJ1biAocGFyYW1zKSB7XG4gICAgbGV0IHN0ZGluRGF0YSA9ICcnXG5cbiAgICBjb25zdCBmaXJzdEFyZ3VtZW50ID0gcGFyYW1zLl9bMF1cbiAgICBjb25zdCBjb21tYW5kcyA9IGZzLnJlYWRkaXJTeW5jKHBhdGguam9pbihfX2Rpcm5hbWUsICdjb21tYW5kcycpKS5tYXAoKGZpbGUpID0+IHBhdGgucGFyc2UoZmlsZSkubmFtZSlcbiAgICBjb25zdCBsb2NhbENvbmYgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3dkaW8uY29uZi5qcycpXG4gICAgY29uc3Qgd2Rpb0NvbmYgPSBmaXJzdEFyZ3VtZW50IHx8IChmcy5leGlzdHNTeW5jKGxvY2FsQ29uZikgPyBsb2NhbENvbmYgOiBudWxsKVxuXG4gICAgLyoqXG4gICAgICogZG9uJ3QgZG8gYW55dGhpbmcgaWYgY29tbWFuZCBoYW5kbGVyIGlzIHRyaWdnZXJlZFxuICAgICAqL1xuICAgIGlmIChjb21tYW5kcy5pbmNsdWRlcyhmaXJzdEFyZ3VtZW50KSkge1xuICAgICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpZiBubyBkZWZhdWx0IHdkaW8uY29uZiB3YXMgZm91bmQgYW5kIG5vIHBhdGggdG8gYSB3ZGlvIGNvbmZpZyB3YXMgc3BlY2lmaWVkXG4gICAgICogcnVuIHRoZSBzZXR1cFxuICAgICAqL1xuICAgIGlmICghd2Rpb0NvbmYgfHwgZmlyc3RBcmd1bWVudCA9PT0gJ2NvbmZpZycpIHtcbiAgICAgICAgcmV0dXJuIHNldHVwKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpZiBgLS13YXRjaGAgcGFyYW0gaXMgc2V0LCBydW4gbGF1bmNoZXIgaW4gd2F0Y2ggbW9kZVxuICAgICAqL1xuICAgIGlmIChwYXJhbXMud2F0Y2gpIHtcbiAgICAgICAgY29uc3Qgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHdkaW9Db25mLCBwYXJhbXMpXG4gICAgICAgIHJldHVybiB3YXRjaGVyLndhdGNoKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpZiBzdGRpbi5pc1RUWSwgdGhlbiBubyBwaXBlZCBpbnB1dCBpcyBwcmVzZW50IGFuZCBsYXVuY2hlciBzaG91bGQgYmVcbiAgICAgKiBjYWxsZWQgaW1tZWRpYXRlbHksIG90aGVyd2lzZSBwaXBlZCBpbnB1dCBpcyBwcm9jZXNzZWQsIGV4cGVjdGluZ1xuICAgICAqIGEgbGlzdCBvZiBmaWxlcyB0byBwcm9jZXNzLlxuICAgICAqXG4gICAgICogc3RkaW4uaXNUVFkgaXMgZmFsc2Ugd2hlbiBjb21tYW5kIGlzIGZyb20gbm9kZXMgc3Bhd24gc2luY2UgaXQncyB0cmVhdGVkIGFzIGEgcGlwZVxuICAgICAqL1xuICAgIGlmIChwcm9jZXNzLnN0ZGluLmlzVFRZIHx8ICFwcm9jZXNzLnN0ZG91dC5pc1RUWSkge1xuICAgICAgICByZXR1cm4gbGF1bmNoKHdkaW9Db25mLCBwYXJhbXMpXG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBnZXQgYSBsaXN0IG9mIHNwZWMgZmlsZXMgdG8gcnVuIGZyb20gc3RkaW4sIG92ZXJyaWRpbmcgYW55IG90aGVyXG4gICAgICogY29uZmlndXJhdGlvbiBzdWl0ZSBvciBzcGVjcy5cbiAgICAgKi9cbiAgICBjb25zdCBzdGRpbiA9IHByb2Nlc3Mub3BlblN0ZGluKClcbiAgICBzdGRpbi5zZXRFbmNvZGluZygndXRmOCcpXG4gICAgc3RkaW4ub24oJ2RhdGEnLCAoZGF0YSkgPT4ge1xuICAgICAgICBzdGRpbkRhdGEgKz0gZGF0YVxuICAgIH0pXG4gICAgc3RkaW4ub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgaWYgKHN0ZGluRGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBwYXJhbXMuc3BlY3MgPSBzdGRpbkRhdGEudHJpbSgpLnNwbGl0KC9cXHI/XFxuLylcbiAgICAgICAgfVxuICAgICAgICBsYXVuY2god2Rpb0NvbmYsIHBhcmFtcylcbiAgICB9KVxufVxuXG5mdW5jdGlvbiBsYXVuY2ggKHdkaW9Db25mLCBwYXJhbXMpIHtcbiAgICBsb2cuZGVidWcoJ1J1biBzdWl0ZSB3aXRoIGNvbmZpZycsIHdkaW9Db25mLCAnYW5kIHBhcmFtcycsIHBhcmFtcylcbiAgICBsZXQgbGF1bmNoZXIgPSBuZXcgTGF1bmNoZXIod2Rpb0NvbmYsIHBhcmFtcylcbiAgICBsYXVuY2hlci5ydW4oKS50aGVuKFxuICAgICAgICAoY29kZSkgPT4gcHJvY2Vzcy5leGl0KGNvZGUpLFxuICAgICAgICAoZSkgPT4gcHJvY2Vzcy5uZXh0VGljaygoKSA9PiB7IHRocm93IGUgfSkpXG59XG4iXX0=