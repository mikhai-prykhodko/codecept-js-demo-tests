"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QUESTIONNAIRE = exports.CLI_PARAMS = exports.CONFIG_HELPER_SUCCESS_MESSAGE = exports.CONFIG_HELPER_INTRO = exports.USAGE = exports.SUPPORTED_RUNNERS = exports.SUPPORTED_SERVICES = exports.SUPPORTED_REPORTER = exports.SUPPORTED_FRAMEWORKS = void 0;

require("source-map-support/register");

var _utils = require("./utils");

const SUPPORTED_FRAMEWORKS = ['mocha', // https://github.com/webdriverio/webdriverio/tree/master/packages/wdio-mocha-framework
'jasmine', // https://github.com/webdriverio/webdriverio/tree/master/packages/wdio-jasmine-framework
'cucumber' // https://github.com/webdriverio/webdriverio/tree/master/packages/wdio-cucumber-framework
];
exports.SUPPORTED_FRAMEWORKS = SUPPORTED_FRAMEWORKS;
const SUPPORTED_REPORTER = [' dot - https://www.npmjs.com/package/@wdio/dot-reporter', ' spec - https://www.npmjs.com/package/@wdio/spec-reporter', ' junit - https://www.npmjs.com/package/@wdio/junit-reporter', ' allure - https://www.npmjs.com/package/@wdio/allure-reporter', ' sumologic - https://www.npmjs.com/package/@wdio/sumologic-reporter', ' concise - https://www.npmjs.com/package/@wdio/concise-reporter', ' teamcity - https://www.npmjs.com/package/wdio-teamcity-reporter', ' json - https://www.npmjs.com/package/wdio-json-reporter', ' testrail - https://www.npmjs.com/package/wdio-testrail-reporter', ' mochawesome - https://www.npmjs.com/package/wdio-mochawesome-reporter', ' timeline - https://www.npmjs.com/package/wdio-timeline-reporter'];
exports.SUPPORTED_REPORTER = SUPPORTED_REPORTER;
const SUPPORTED_SERVICES = [' sauce - https://www.npmjs.com/package/@wdio/sauce-service', ' testingbot - https://www.npmjs.com/package/@wdio/testingbot-service', ' firefox-profile - https://www.npmjs.com/package/@wdio/firefox-profile-service', ' selenium-standalone - https://www.npmjs.com/package/@wdio/selenium-standalone-service', ' devtools - https://www.npmjs.com/package/@wdio/devtools-service', ' applitools - https://www.npmjs.com/package/@wdio/applitools-service', ' browserstack - https://www.npmjs.com/package/wdio-browserstack-service', ' appium - https://www.npmjs.com/package/wdio-appium-service', ' phantomjs - https://www.npmjs.com/package/wdio-phantomjs-service', ' static-server - https://www.npmjs.com/package/wdio-static-server-service', ' visual-regression - https://www.npmjs.com/package/wdio-visual-regression-service', ' webpack - https://www.npmjs.com/package/wdio-webpack-service', ' webpack-dev-server - https://www.npmjs.com/package/wdio-webpack-dev-server-service', ' chromedriver - https://www.npmjs.com/package/wdio-chromedriver-service', ' iedriver - https://www.npmjs.com/package/wdio-iedriver-service'];
exports.SUPPORTED_SERVICES = SUPPORTED_SERVICES;
const SUPPORTED_RUNNERS = [' local - https://www.npmjs.com/package/@wdio/local-runner', ' lambda - https://www.npmjs.com/package/@wdio/lambda-runner'];
exports.SUPPORTED_RUNNERS = SUPPORTED_RUNNERS;
const LOG_LEVELS = ['trace', 'debug', 'info', 'warn', 'error'];
const USAGE = `
WebdriverIO CLI runner

Usage: wdio [options] [configFile]
Usage: wdio config
Usage: wdio repl <browserName>

config file defaults to wdio.conf.js
The [options] object will override values from the config file.
An optional list of spec files can be piped to wdio that will override configured specs.
Same applies to the exclude option. It can take a list of specs to exclude for a given run
and it also overrides the exclude key from the config file.`;
exports.USAGE = USAGE;
const CONFIG_HELPER_INTRO = `
=========================
WDIO Configuration Helper
=========================
`;
exports.CONFIG_HELPER_INTRO = CONFIG_HELPER_INTRO;
const CONFIG_HELPER_SUCCESS_MESSAGE = `
Configuration file was created successfully!
To run your tests, execute:
$ wdio wdio.conf.js
`;
exports.CONFIG_HELPER_SUCCESS_MESSAGE = CONFIG_HELPER_SUCCESS_MESSAGE;
const CLI_PARAMS = [{
  name: 'help',
  description: 'prints WebdriverIO help menu'
}, {
  name: 'version',
  description: 'prints WebdriverIO version'
}, {
  name: 'host',
  alias: 'h',
  describe: 'automation driver host address',
  type: 'string'
}, {
  name: 'port',
  alias: 'p',
  describe: 'automation driver port',
  type: 'number'
}, {
  name: 'user',
  alias: 'u',
  description: 'username if using a cloud service as automation backend',
  type: 'string'
}, {
  name: 'key',
  alias: 'k',
  description: 'corresponding access key to the user',
  type: 'string'
}, {
  name: 'watch',
  description: 'watch specs for changes',
  type: 'boolean'
}, {
  name: 'logLevel',
  alias: 'l',
  description: 'level of logging verbosity',
  choices: LOG_LEVELS
}, {
  name: 'bail',
  description: 'stop test runner after specific amount of tests have failed',
  type: 'number'
}, {
  name: 'baseUrl',
  description: 'shorten url command calls by setting a base url',
  type: 'string'
}, {
  name: 'waitforTimeout',
  alias: 'w',
  description: 'timeout for all waitForXXX commands',
  type: 'number'
}, {
  name: 'framework',
  alias: 'f',
  description: 'defines the framework (Mocha, Jasmine or Cucumber) to run the specs',
  type: 'string'
}, {
  name: 'reporters',
  alias: 'r',
  description: 'reporters to print out the results on stdout',
  type: 'array'
}, {
  name: 'suite',
  description: 'overwrites the specs attribute and runs the defined suite',
  type: 'array'
}, {
  name: 'spec',
  description: 'run only a certain spec file - overrides specs piped from stdin',
  type: 'array'
}, {
  name: 'exclude',
  description: 'exclude certain spec file from the test run - overrides exclude piped from stdin',
  type: 'array'
}, {
  name: 'mochaOpts',
  description: 'Mocha options'
}, {
  name: 'jasmineOpts',
  description: 'Jasmine options'
}, {
  name: 'cucumberOpts',
  description: 'Cucumber options'
}];
exports.CLI_PARAMS = CLI_PARAMS;
const QUESTIONNAIRE = [{
  type: 'list',
  name: 'runner',
  message: 'Where should your tests be launched',
  choices: SUPPORTED_RUNNERS,
  filter: runner => runner.split(/-/)[0].trim()
}, {
  type: 'confirm',
  name: 'installRunner',
  message: 'Shall I install the runner plugin for you?',
  default: true
}, {
  type: 'list',
  name: 'backend',
  message: 'Where is your automation backend located?',
  choices: ['On my local machine', 'In the cloud using Sauce Labs, Browserstack or Testingbot', 'In the cloud using a different service', 'I have my own Selenium cloud']
}, {
  type: 'input',
  name: 'host',
  message: 'What is the host address of that cloud service?',
  when: answers => answers.backend.indexOf('different service') > -1
}, {
  type: 'input',
  name: 'port',
  message: 'What is the port on which that service is running?',
  default: '80',
  when: answers => answers.backend.indexOf('different service') > -1
}, {
  type: 'input',
  name: 'env_user',
  message: 'Environment variable for username',
  default: 'SAUCE_USERNAME',
  when: answers => answers.backend.indexOf('In the cloud') > -1
}, {
  type: 'input',
  name: 'env_key',
  message: 'Environment variable for access key',
  default: 'SAUCE_ACCESS_KEY',
  when: answers => answers.backend.indexOf('In the cloud') > -1
}, {
  type: 'input',
  name: 'host',
  message: 'What is the IP or URI to your Selenium standalone server?',
  default: '0.0.0.0',
  when: answers => answers.backend.indexOf('own Selenium cloud') > -1
}, {
  type: 'input',
  name: 'port',
  message: 'What is the port which your Selenium standalone server is running on?',
  default: '4444',
  when: answers => answers.backend.indexOf('own Selenium cloud') > -1
}, {
  type: 'input',
  name: 'path',
  message: 'What is the path to your Selenium standalone server?',
  default: '/wd/hub',
  when: answers => answers.backend.indexOf('own Selenium cloud') > -1
}, {
  type: 'list',
  name: 'framework',
  message: 'Which framework do you want to use?',
  choices: SUPPORTED_FRAMEWORKS
}, {
  type: 'confirm',
  name: 'installFramework',
  message: 'Shall I install the framework adapter for you?',
  default: true
}, {
  type: 'list',
  name: 'executionMode',
  message: 'Do you want to run WebdriverIO commands synchronous or asynchronous?',
  choices: ['sync', 'async']
}, {
  type: 'input',
  name: 'specs',
  message: 'Where are your test specs located?',
  default: './test/specs/**/*.js',
  when: answers => answers.framework.match(/(mocha|jasmine)/)
}, {
  type: 'input',
  name: 'specs',
  message: 'Where are your feature files located?',
  default: './features/**/*.feature',
  when: answers => answers.framework === 'cucumber'
}, {
  type: 'input',
  name: 'stepDefinitions',
  message: 'Where are your step definitions located?',
  default: './features/step-definitions',
  when: answers => answers.framework === 'cucumber'
}, {
  type: 'checkbox',
  name: 'reporters',
  message: 'Which reporter do you want to use?',
  choices: SUPPORTED_REPORTER,
  filter: (0, _utils.filterPackageName)('reporter')
}, {
  type: 'confirm',
  name: 'installReporter',
  message: 'Shall I install the reporter library for you?',
  default: true,
  when: answers => answers.reporters.length > 0
}, {
  type: 'checkbox',
  name: 'services',
  message: 'Do you want to add a service to your test setup?',
  choices: SUPPORTED_SERVICES,
  filter: (0, _utils.filterPackageName)('service')
}, {
  type: 'confirm',
  name: 'installServices',
  message: 'Shall I install the services for you?',
  default: true,
  when: answers => answers.services.length > 0
}, {
  type: 'input',
  name: 'outputDir',
  message: 'In which directory should the xunit reports get stored?',
  default: './',
  when: answers => answers.reporters.includes('junit')
}, {
  type: 'input',
  name: 'outputDir',
  message: 'In which directory should the json reports get stored?',
  default: './',
  when: answers => answers.reporters.includes('json')
}, {
  type: 'input',
  name: 'outputDir',
  message: 'In which directory should the mochawesome json reports get stored?',
  default: './',
  when: answers => answers.reporters.includes('mochawesome')
}, {
  type: 'list',
  name: 'logLevel',
  message: 'Level of logging verbosity',
  default: 'info',
  choices: LOG_LEVELS
}, {
  type: 'input',
  name: 'baseUrl',
  message: 'What is the base url?',
  default: 'http://localhost'
}];
exports.QUESTIONNAIRE = QUESTIONNAIRE;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb25maWcuanMiXSwibmFtZXMiOlsiU1VQUE9SVEVEX0ZSQU1FV09SS1MiLCJTVVBQT1JURURfUkVQT1JURVIiLCJTVVBQT1JURURfU0VSVklDRVMiLCJTVVBQT1JURURfUlVOTkVSUyIsIkxPR19MRVZFTFMiLCJVU0FHRSIsIkNPTkZJR19IRUxQRVJfSU5UUk8iLCJDT05GSUdfSEVMUEVSX1NVQ0NFU1NfTUVTU0FHRSIsIkNMSV9QQVJBTVMiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJhbGlhcyIsImRlc2NyaWJlIiwidHlwZSIsImNob2ljZXMiLCJRVUVTVElPTk5BSVJFIiwibWVzc2FnZSIsImZpbHRlciIsInJ1bm5lciIsInNwbGl0IiwidHJpbSIsImRlZmF1bHQiLCJ3aGVuIiwiYW5zd2VycyIsImJhY2tlbmQiLCJpbmRleE9mIiwiZnJhbWV3b3JrIiwibWF0Y2giLCJyZXBvcnRlcnMiLCJsZW5ndGgiLCJzZXJ2aWNlcyIsImluY2x1ZGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFFTyxNQUFNQSxvQkFBb0IsR0FBRyxDQUNoQyxPQURnQyxFQUN2QjtBQUNULFNBRmdDLEVBRXJCO0FBQ1gsVUFIZ0MsQ0FHckI7QUFIcUIsQ0FBN0I7O0FBTUEsTUFBTUMsa0JBQWtCLEdBQUcsQ0FDOUIseURBRDhCLEVBRTlCLDJEQUY4QixFQUc5Qiw2REFIOEIsRUFJOUIsK0RBSjhCLEVBSzlCLHFFQUw4QixFQU05QixpRUFOOEIsRUFPOUIsa0VBUDhCLEVBUTlCLDBEQVI4QixFQVM5QixrRUFUOEIsRUFVOUIsd0VBVjhCLEVBVzlCLGtFQVg4QixDQUEzQjs7QUFjQSxNQUFNQyxrQkFBa0IsR0FBRyxDQUM5Qiw0REFEOEIsRUFFOUIsc0VBRjhCLEVBRzlCLGdGQUg4QixFQUk5Qix3RkFKOEIsRUFLOUIsa0VBTDhCLEVBTTlCLHNFQU44QixFQU85Qix5RUFQOEIsRUFROUIsNkRBUjhCLEVBUzlCLG1FQVQ4QixFQVU5QiwyRUFWOEIsRUFXOUIs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QSxPQUFPLENBQUNLLFNBQVIsQ0FBa0JHLFFBQWxCLENBQTJCLE1BQTNCO0FBTHBCLENBaEkwQixFQXNJMUI7QUFDQ2xCLEVBQUFBLElBQUksRUFBRSxPQURQO0FBRUNKLEVBQUFBLElBQUksRUFBRSxXQUZQO0FBR0NPLEVBQUFBLE9BQU8sRUFBRSxvRUFIVjtBQUlDSyxFQUFBQSxPQUFPLEVBQUUsSUFKVjtBQUtDQyxFQUFBQSxJQUFJLEVBQUdDLE9BQUQsSUFBYUEsT0FBTyxDQUFDSyxTQUFSLENBQWtCRyxRQUFsQixDQUEyQixhQUEzQjtBQUxwQixDQXRJMEIsRUE0STFCO0FBQ0NsQixFQUFBQSxJQUFJLEVBQUUsTUFEUDtBQUVDSixFQUFBQSxJQUFJLEVBQUUsVUFGUDtBQUdDTyxFQUFBQSxPQUFPLEVBQUUsNEJBSFY7QUFJQ0ssRUFBQUEsT0FBTyxFQUFFLE1BSlY7QUFLQ1AsRUFBQUEsT0FBTyxFQUFFVjtBQUxWLENBNUkwQixFQWtKMUI7QUFDQ1MsRUFBQUEsSUFBSSxFQUFFLE9BRFA7QUFFQ0osRUFBQUEsSUFBSSxFQUFFLFNBRlA7QUFHQ08sRUFBQUEsT0FBTyxFQUFFLHVCQUhWO0FBSUNLLEVBQUFBLE9BQU8sRUFBRTtBQUpWLENBbEowQixDQUF0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZpbHRlclBhY2thZ2VOYW1lIH0gZnJvbSAnLi91dGlscydcblxuZXhwb3J0IGNvbnN0IFNVUFBPUlRFRF9GUkFNRVdPUktTID0gW1xuICAgICdtb2NoYScsIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJkcml2ZXJpby93ZWJkcml2ZXJpby90cmVlL21hc3Rlci9wYWNrYWdlcy93ZGlvLW1vY2hhLWZyYW1ld29ya1xuICAgICdqYXNtaW5lJywgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYmRyaXZlcmlvL3dlYmRyaXZlcmlvL3RyZWUvbWFzdGVyL3BhY2thZ2VzL3dkaW8tamFzbWluZS1mcmFtZXdvcmtcbiAgICAnY3VjdW1iZXInIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJkcml2ZXJpby93ZWJkcml2ZXJpby90cmVlL21hc3Rlci9wYWNrYWdlcy93ZGlvLWN1Y3VtYmVyLWZyYW1ld29ya1xuXVxuXG5leHBvcnQgY29uc3QgU1VQUE9SVEVEX1JFUE9SVEVSID0gW1xuICAgICcgZG90IC0gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQHdkaW8vZG90LXJlcG9ydGVyJyxcbiAgICAnIHNwZWMgLSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9Ad2Rpby9zcGVjLXJlcG9ydGVyJyxcbiAgICAnIGp1bml0IC0gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQHdkaW8vanVuaXQtcmVwb3J0ZXInLFxuICAgICcgYWxsdXJlIC0gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQHdkaW8vYWxsdXJlLXJlcG9ydGVyJyxcbiAgICAnIHN1bW9sb2dpYyAtIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL0B3ZGlvL3N1bW9sb2dpYy1yZXBvcnRlcicsXG4gICAgJyBjb25jaXNlIC0gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQHdkaW8vY29uY2lzZS1yZXBvcnRlcicsXG4gICAgJyB0ZWFtY2l0eSAtIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3dkaW8tdGVhbWNpdHktcmVwb3J0ZXInLFxuICAgICcganNvbiAtIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3dkaW8tanNvbi1yZXBvcnRlcicsXG4gICAgJyB0ZXN0cmFpbCAtIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3dkaW8tdGVzdHJhaWwtcmVwb3J0ZXInLFxuICAgICcgbW9jaGF3ZXNvbWUgLSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS93ZGlvLW1vY2hhd2Vzb21lLXJlcG9ydGVyJyxcbiAgICAnIHRpbWVsaW5lIC0gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvd2Rpby10aW1lbGluZS1yZXBvcnRlcidcbl1cblxuZXhwb3J0IGNvbnN0IFNVUFBPUlRFRF9TRVJWSUNFUyA9IFtcbiAgICAnIHNhdWNlIC0gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQHdkaW8vc2F1Y2Utc2VydmljZScsXG4gICAgJyB0ZXN0aW5nYm90IC0gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQHdkaW8vdGVzdGluZ2JvdC1zZXJ2aWNlJyxcbiAgICAnIGZpcmVmb3gtcHJvZmlsZSAtIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL0B3ZGlvL2ZpcmVmb3gtcHJvZmlsZS1zZXJ2aWNlJyxcbiAgICAnIHNlbGVuaXVtLXN0YW5kYWxvbmUgLSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9Ad2Rpby9zZWxlbml1bS1zdGFuZGFsb25lLXNlcnZpY2UnLFxuICAgICcgZGV2dG9vbHMgLSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9Ad2Rpby9kZXZ0b29scy1zZXJ2aWNlJyxcbiAgICAnIGFwcGxpdG9vbHMgLSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9Ad2Rpby9hcHBsaXRvb2xzLXNlcnZpY2UnLFxuICAgICcgYnJvd3NlcnN0YWNrIC0gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvd2Rpby1icm93c2Vyc3RhY2stc2VydmljZScsXG4gICAgJyBhcHBpdW0gLSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS93ZGlvLWFwcGl1bS1zZXJ2aWNlJyxcbiAgICAnIHBoYW50b21qcyAtIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3dkaW8tcGhhbnRvbWpzLXNlcnZpY2UnLFxuICAgICcgc3RhdGljLXNlcnZlciAtIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3dkaW8tc3RhdGljLXNlcnZlci1zZXJ2aWNlJyxcbiAgICAnIHZpc3VhbC1yZWdyZXNzaW9uIC0gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvd2Rpby12aXN1YWwtcmVncmVzc2lvbi1zZXJ2aWNlJyxcbiAgICAnIHdlYnBhY2sgLSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS93ZGlvLXdlYnBhY2stc2VydmljZScsXG4gICAgJyB3ZWJwYWNrLWRldi1zZXJ2ZXIgLSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS93ZGlvLXdlYnBhY2stZGV2LXNlcnZlci1zZXJ2aWNlJyxcbiAgICAnIGNocm9tZWRyaXZlciAtIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3dkaW8tY2hyb21lZHJpdmVyLXNlcnZpY2UnLFxuICAgICcgaWVkcml2ZXIgLSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS93ZGlvLWllZHJpdmVyLXNlcnZpY2UnXG5dXG5cbmV4cG9ydCBjb25zdCBTVVBQT1JURURfUlVOTkVSUyA9IFtcbiAgICAnIGxvY2FsIC0gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQHdkaW8vbG9jYWwtcnVubmVyJyxcbiAgICAnIGxhbWJkYSAtIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL0B3ZGlvL2xhbWJkYS1ydW5uZXInXG5dXG5cbmNvbnN0IExPR19MRVZFTFMgPSBbJ3RyYWNlJywgJ2RlYnVnJywgJ2luZm8nLCAnd2FybicsICdlcnJvciddXG5cbmV4cG9ydCBjb25zdCBVU0FHRSA9IGBcbldlYmRyaXZlcklPIENMSSBydW5uZXJcblxuVXNhZ2U6IHdkaW8gW29wdGlvbnNdIFtjb25maWdGaWxlXVxuVXNhZ2U6IHdkaW8gY29uZmlnXG5Vc2FnZTogd2RpbyByZXBsIDxicm93c2VyTmFtZT5cblxuY29uZmlnIGZpbGUgZGVmYXVsdHMgdG8gd2Rpby5jb25mLmpzXG5UaGUgW29wdGlvbnNdIG9iamVjdCB3aWxsIG92ZXJyaWRlIHZhbHVlcyBmcm9tIHRoZSBjb25maWcgZmlsZS5cbkFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BlYyBmaWxlcyBjYW4gYmUgcGlwZWQgdG8gd2RpbyB0aGF0IHdpbGwgb3ZlcnJpZGUgY29uZmlndXJlZCBzcGVjcy5cblNhbWUgYXBwbGllcyB0byB0aGUgZXhjbHVkZSBvcHRpb24uIEl0IGNhbiB0YWtlIGEgbGlzdCBvZiBzcGVjcyB0byBleGNsdWRlIGZvciBhIGdpdmVuIHJ1blxuYW5kIGl0IGFsc28gb3ZlcnJpZGVzIHRoZSBleGNsdWRlIGtleSBmcm9tIHRoZSBjb25maWcgZmlsZS5gXG5cbmV4cG9ydCBjb25zdCBDT05GSUdfSEVMUEVSX0lOVFJPID0gYFxuPT09PT09PT09PT09PT09PT09PT09PT09PVxuV0RJTyBDb25maWd1cmF0aW9uIEhlbHBlclxuPT09PT09PT09PT09PT09PT09PT09PT09PVxuYFxuXG5leHBvcnQgY29uc3QgQ09ORklHX0hFTFBFUl9TVUNDRVNTX01FU1NBR0UgPSBgXG5Db25maWd1cmF0aW9uIGZpbGUgd2FzIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5IVxuVG8gcnVuIHlvdXIgdGVzdHMsIGV4ZWN1dGU6XG4kIHdkaW8gd2Rpby5jb25mLmpzXG5gXG5cbmV4cG9ydCBjb25zdCBDTElfUEFSQU1TID0gW3tcbiAgICBuYW1lOiAnaGVscCcsXG4gICAgZGVzY3JpcHRpb246ICdwcmludHMgV2ViZHJpdmVySU8gaGVscCBtZW51J1xufSwge1xuICAgIG5hbWU6ICd2ZXJzaW9uJyxcbiAgICBkZXNjcmlwdGlvbjogJ3ByaW50cyBXZWJkcml2ZXJJTyB2ZXJzaW9uJ1xufSwge1xuICAgIG5hbWU6ICdob3N0JyxcbiAgICBhbGlhczogJ2gnLFxuICAgIGRlc2NyaWJlOiAnYXV0b21hdGlvbiBkcml2ZXIgaG9zdCBhZGRyZXNzJyxcbiAgICB0eXBlOiAnc3RyaW5nJ1xufSwge1xuICAgIG5hbWU6ICdwb3J0JyxcbiAgICBhbGlhczogJ3AnLFxuICAgIGRlc2NyaWJlOiAnYXV0b21hdGlvbiBkcml2ZXIgcG9ydCcsXG4gICAgdHlwZTogJ251bWJlcidcbn0sIHtcbiAgICBuYW1lOiAndXNlcicsXG4gICAgYWxpYXM6ICd1JyxcbiAgICBkZXNjcmlwdGlvbjogJ3VzZXJuYW1lIGlmIHVzaW5nIGEgY2xvdWQgc2VydmljZSBhcyBhdXRvbWF0aW9uIGJhY2tlbmQnLFxuICAgIHR5cGU6ICdzdHJpbmcnXG59LCB7XG4gICAgbmFtZTogJ2tleScsXG4gICAgYWxpYXM6ICdrJyxcbiAgICBkZXNjcmlwdGlvbjogJ2NvcnJlc3BvbmRpbmcgYWNjZXNzIGtleSB0byB0aGUgdXNlcicsXG4gICAgdHlwZTogJ3N0cmluZydcbn0sIHtcbiAgICBuYW1lOiAnd2F0Y2gnLFxuICAgIGRlc2NyaXB0aW9uOiAnd2F0Y2ggc3BlY3MgZm9yIGNoYW5nZXMnLFxuICAgIHR5cGU6ICdib29sZWFuJ1xufSwge1xuICAgIG5hbWU6ICdsb2dMZXZlbCcsXG4gICAgYWxpYXM6ICdsJyxcbiAgICBkZXNjcmlwdGlvbjogJ2xldmVsIG9mIGxvZ2dpbmcgdmVyYm9zaXR5JyxcbiAgICBjaG9pY2VzOiBMT0dfTEVWRUxTXG59LCB7XG4gICAgbmFtZTogJ2JhaWwnLFxuICAgIGRlc2NyaXB0aW9uOiAnc3RvcCB0ZXN0IHJ1bm5lciBhZnRlciBzcGVjaWZpYyBhbW91bnQgb2YgdGVzdHMgaGF2ZSBmYWlsZWQnLFxuICAgIHR5cGU6ICdudW1iZXInXG59LCB7XG4gICAgbmFtZTogJ2Jhc2VVcmwnLFxuICAgIGRlc2NyaXB0aW9uOiAnc2hvcnRlbiB1cmwgY29tbWFuZCBjYWxscyBieSBzZXR0aW5nIGEgYmFzZSB1cmwnLFxuICAgIHR5cGU6ICdzdHJpbmcnXG59LCB7XG4gICAgbmFtZTogJ3dhaXRmb3JUaW1lb3V0JyxcbiAgICBhbGlhczogJ3cnLFxuICAgIGRlc2NyaXB0aW9uOiAndGltZW91dCBmb3IgYWxsIHdhaXRGb3JYWFggY29tbWFuZHMnLFxuICAgIHR5cGU6ICdudW1iZXInXG59LCB7XG4gICAgbmFtZTogJ2ZyYW1ld29yaycsXG4gICAgYWxpYXM6ICdmJyxcbiAgICBkZXNjcmlwdGlvbjogJ2RlZmluZXMgdGhlIGZyYW1ld29yayAoTW9jaGEsIEphc21pbmUgb3IgQ3VjdW1iZXIpIHRvIHJ1biB0aGUgc3BlY3MnLFxuICAgIHR5cGU6ICdzdHJpbmcnXG59LCB7XG4gICAgbmFtZTogJ3JlcG9ydGVycycsXG4gICAgYWxpYXM6ICdyJyxcbiAgICBkZXNjcmlwdGlvbjogJ3JlcG9ydGVycyB0byBwcmludCBvdXQgdGhlIHJlc3VsdHMgb24gc3Rkb3V0JyxcbiAgICB0eXBlOiAnYXJyYXknXG59LCB7XG4gICAgbmFtZTogJ3N1aXRlJyxcbiAgICBkZXNjcmlwdGlvbjogJ292ZXJ3cml0ZXMgdGhlIHNwZWNzIGF0dHJpYnV0ZSBhbmQgcnVucyB0aGUgZGVmaW5lZCBzdWl0ZScsXG4gICAgdHlwZTogJ2FycmF5J1xufSwge1xuICAgIG5hbWU6ICdzcGVjJyxcbiAgICBkZXNjcmlwdGlvbjogJ3J1biBvbmx5IGEgY2VydGFpbiBzcGVjIGZpbGUgLSBvdmVycmlkZXMgc3BlY3MgcGlwZWQgZnJvbSBzdGRpbicsXG4gICAgdHlwZTogJ2FycmF5J1xufSwge1xuICAgIG5hbWU6ICdleGNsdWRlJyxcbiAgICBkZXNjcmlwdGlvbjogJ2V4Y2x1ZGUgY2VydGFpbiBzcGVjIGZpbGUgZnJvbSB0aGUgdGVzdCBydW4gLSBvdmVycmlkZXMgZXhjbHVkZSBwaXBlZCBmcm9tIHN0ZGluJyxcbiAgICB0eXBlOiAnYXJyYXknXG59LCB7XG4gICAgbmFtZTogJ21vY2hhT3B0cycsXG4gICAgZGVzY3JpcHRpb246ICdNb2NoYSBvcHRpb25zJ1xufSwge1xuICAgIG5hbWU6ICdqYXNtaW5lT3B0cycsXG4gICAgZGVzY3JpcHRpb246ICdKYXNtaW5lIG9wdGlvbnMnXG59LCB7XG4gICAgbmFtZTogJ2N1Y3VtYmVyT3B0cycsXG4gICAgZGVzY3JpcHRpb246ICdDdWN1bWJlciBvcHRpb25zJ1xufV1cblxuZXhwb3J0IGNvbnN0IFFVRVNUSU9OTkFJUkUgPSBbe1xuICAgIHR5cGU6ICdsaXN0JyxcbiAgICBuYW1lOiAncnVubmVyJyxcbiAgICBtZXNzYWdlOiAnV2hlcmUgc2hvdWxkIHlvdXIgdGVzdHMgYmUgbGF1bmNoZWQnLFxuICAgIGNob2ljZXM6IFNVUFBPUlRFRF9SVU5ORVJTLFxuICAgIGZpbHRlcjogKHJ1bm5lcikgPT4gcnVubmVyLnNwbGl0KC8tLylbMF0udHJpbSgpXG59LCB7XG4gICAgdHlwZTogJ2NvbmZpcm0nLFxuICAgIG5hbWU6ICdpbnN0YWxsUnVubmVyJyxcbiAgICBtZXNzYWdlOiAnU2hhbGwgSSBpbnN0YWxsIHRoZSBydW5uZXIgcGx1Z2luIGZvciB5b3U/JyxcbiAgICBkZWZhdWx0OiB0cnVlXG59LCB7XG4gICAgdHlwZTogJ2xpc3QnLFxuICAgIG5hbWU6ICdiYWNrZW5kJyxcbiAgICBtZXNzYWdlOiAnV2hlcmUgaXMgeW91ciBhdXRvbWF0aW9uIGJhY2tlbmQgbG9jYXRlZD8nLFxuICAgIGNob2ljZXM6IFtcbiAgICAgICAgJ09uIG15IGxvY2FsIG1hY2hpbmUnLFxuICAgICAgICAnSW4gdGhlIGNsb3VkIHVzaW5nIFNhdWNlIExhYnMsIEJyb3dzZXJzdGFjayBvciBUZXN0aW5nYm90JyxcbiAgICAgICAgJ0luIHRoZSBjbG91ZCB1c2luZyBhIGRpZmZlcmVudCBzZXJ2aWNlJyxcbiAgICAgICAgJ0kgaGF2ZSBteSBvd24gU2VsZW5pdW0gY2xvdWQnXG4gICAgXVxufSwge1xuICAgIHR5cGU6ICdpbnB1dCcsXG4gICAgbmFtZTogJ2hvc3QnLFxuICAgIG1lc3NhZ2U6ICdXaGF0IGlzIHRoZSBob3N0IGFkZHJlc3Mgb2YgdGhhdCBjbG91ZCBzZXJ2aWNlPycsXG4gICAgd2hlbjogKGFuc3dlcnMpID0+IGFuc3dlcnMuYmFja2VuZC5pbmRleE9mKCdkaWZmZXJlbnQgc2VydmljZScpID4gLTFcbn0sIHtcbiAgICB0eXBlOiAnaW5wdXQnLFxuICAgIG5hbWU6ICdwb3J0JyxcbiAgICBtZXNzYWdlOiAnV2hhdCBpcyB0aGUgcG9ydCBvbiB3aGljaCB0aGF0IHNlcnZpY2UgaXMgcnVubmluZz8nLFxuICAgIGRlZmF1bHQ6ICc4MCcsXG4gICAgd2hlbjogKGFuc3dlcnMpID0+IGFuc3dlcnMuYmFja2VuZC5pbmRleE9mKCdkaWZmZXJlbnQgc2VydmljZScpID4gLTFcbn0sIHtcbiAgICB0eXBlOiAnaW5wdXQnLFxuICAgIG5hbWU6ICdlbnZfdXNlcicsXG4gICAgbWVzc2FnZTogJ0Vudmlyb25tZW50IHZhcmlhYmxlIGZvciB1c2VybmFtZScsXG4gICAgZGVmYXVsdDogJ1NBVUNFX1VTRVJOQU1FJyxcbiAgICB3aGVuOiAoYW5zd2VycykgPT4gYW5zd2Vycy5iYWNrZW5kLmluZGV4T2YoJ0luIHRoZSBjbG91ZCcpID4gLTFcbn0sIHtcbiAgICB0eXBlOiAnaW5wdXQnLFxuICAgIG5hbWU6ICdlbnZfa2V5JyxcbiAgICBtZXNzYWdlOiAnRW52aXJvbm1lbnQgdmFyaWFibGUgZm9yIGFjY2VzcyBrZXknLFxuICAgIGRlZmF1bHQ6ICdTQVVDRV9BQ0NFU1NfS0VZJyxcbiAgICB3aGVuOiAoYW5zd2VycykgPT4gYW5zd2Vycy5iYWNrZW5kLmluZGV4T2YoJ0luIHRoZSBjbG91ZCcpID4gLTFcbn0sIHtcbiAgICB0eXBlOiAnaW5wdXQnLFxuICAgIG5hbWU6ICdob3N0JyxcbiAgICBtZXNzYWdlOiAnV2hhdCBpcyB0aGUgSVAgb3IgVVJJIHRvIHlvdXIgU2VsZW5pdW0gc3RhbmRhbG9uZSBzZXJ2ZXI/JyxcbiAgICBkZWZhdWx0OiAnMC4wLjAuMCcsXG4gICAgd2hlbjogKGFuc3dlcnMpID0+IGFuc3dlcnMuYmFja2VuZC5pbmRleE9mKCdvd24gU2VsZW5pdW0gY2xvdWQnKSA+IC0xXG59LCB7XG4gICAgdHlwZTogJ2lucHV0JyxcbiAgICBuYW1lOiAncG9ydCcsXG4gICAgbWVzc2FnZTogJ1doYXQgaXMgdGhlIHBvcnQgd2hpY2ggeW91ciBTZWxlbml1bSBzdGFuZGFsb25lIHNlcnZlciBpcyBydW5uaW5nIG9uPycsXG4gICAgZGVmYXVsdDogJzQ0NDQnLFxuICAgIHdoZW46IChhbnN3ZXJzKSA9PiBhbnN3ZXJzLmJhY2tlbmQuaW5kZXhPZignb3duIFNlbGVuaXVtIGNsb3VkJykgPiAtMVxufSwge1xuICAgIHR5cGU6ICdpbnB1dCcsXG4gICAgbmFtZTogJ3BhdGgnLFxuICAgIG1lc3NhZ2U6ICdXaGF0IGlzIHRoZSBwYXRoIHRvIHlvdXIgU2VsZW5pdW0gc3RhbmRhbG9uZSBzZXJ2ZXI/JyxcbiAgICBkZWZhdWx0OiAnL3dkL2h1YicsXG4gICAgd2hlbjogKGFuc3dlcnMpID0+IGFuc3dlcnMuYmFja2VuZC5pbmRleE9mKCdvd24gU2VsZW5pdW0gY2xvdWQnKSA+IC0xXG59LCB7XG4gICAgdHlwZTogJ2xpc3QnLFxuICAgIG5hbWU6ICdmcmFtZXdvcmsnLFxuICAgIG1lc3NhZ2U6ICdXaGljaCBmcmFtZXdvcmsgZG8geW91IHdhbnQgdG8gdXNlPycsXG4gICAgY2hvaWNlczogU1VQUE9SVEVEX0ZSQU1FV09SS1Ncbn0sIHtcbiAgICB0eXBlOiAnY29uZmlybScsXG4gICAgbmFtZTogJ2luc3RhbGxGcmFtZXdvcmsnLFxuICAgIG1lc3NhZ2U6ICdTaGFsbCBJIGluc3RhbGwgdGhlIGZyYW1ld29yayBhZGFwdGVyIGZvciB5b3U/JyxcbiAgICBkZWZhdWx0OiB0cnVlXG59LCB7XG4gICAgdHlwZTogJ2xpc3QnLFxuICAgIG5hbWU6ICdleGVjdXRpb25Nb2RlJyxcbiAgICBtZXNzYWdlOiAnRG8geW91IHdhbnQgdG8gcnVuIFdlYmRyaXZlcklPIGNvbW1hbmRzIHN5bmNocm9ub3VzIG9yIGFzeW5jaHJvbm91cz8nLFxuICAgIGNob2ljZXM6IFtcbiAgICAgICAgJ3N5bmMnLFxuICAgICAgICAnYXN5bmMnXG4gICAgXVxufSwge1xuICAgIHR5cGU6ICdpbnB1dCcsXG4gICAgbmFtZTogJ3NwZWNzJyxcbiAgICBtZXNzYWdlOiAnV2hlcmUgYXJlIHlvdXIgdGVzdCBzcGVjcyBsb2NhdGVkPycsXG4gICAgZGVmYXVsdDogJy4vdGVzdC9zcGVjcy8qKi8qLmpzJyxcbiAgICB3aGVuOiAoYW5zd2VycykgPT4gYW5zd2Vycy5mcmFtZXdvcmsubWF0Y2goLyhtb2NoYXxqYXNtaW5lKS8pXG59LCB7XG4gICAgdHlwZTogJ2lucHV0JyxcbiAgICBuYW1lOiAnc3BlY3MnLFxuICAgIG1lc3NhZ2U6ICdXaGVyZSBhcmUgeW91ciBmZWF0dXJlIGZpbGVzIGxvY2F0ZWQ/JyxcbiAgICBkZWZhdWx0OiAnLi9mZWF0dXJlcy8qKi8qLmZlYXR1cmUnLFxuICAgIHdoZW46IChhbnN3ZXJzKSA9PiBhbnN3ZXJzLmZyYW1ld29yayA9PT0gJ2N1Y3VtYmVyJ1xufSwge1xuICAgIHR5cGU6ICdpbnB1dCcsXG4gICAgbmFtZTogJ3N0ZXBEZWZpbml0aW9ucycsXG4gICAgbWVzc2FnZTogJ1doZXJlIGFyZSB5b3VyIHN0ZXAgZGVmaW5pdGlvbnMgbG9jYXRlZD8nLFxuICAgIGRlZmF1bHQ6ICcuL2ZlYXR1cmVzL3N0ZXAtZGVmaW5pdGlvbnMnLFxuICAgIHdoZW46IChhbnN3ZXJzKSA9PiBhbnN3ZXJzLmZyYW1ld29yayA9PT0gJ2N1Y3VtYmVyJ1xufSwge1xuICAgIHR5cGU6ICdjaGVja2JveCcsXG4gICAgbmFtZTogJ3JlcG9ydGVycycsXG4gICAgbWVzc2FnZTogJ1doaWNoIHJlcG9ydGVyIGRvIHlvdSB3YW50IHRvIHVzZT8nLFxuICAgIGNob2ljZXM6IFNVUFBPUlRFRF9SRVBPUlRFUixcbiAgICBmaWx0ZXI6IGZpbHRlclBhY2thZ2VOYW1lKCdyZXBvcnRlcicpXG59LCB7XG4gICAgdHlwZTogJ2NvbmZpcm0nLFxuICAgIG5hbWU6ICdpbnN0YWxsUmVwb3J0ZXInLFxuICAgIG1lc3NhZ2U6ICdTaGFsbCBJIGluc3RhbGwgdGhlIHJlcG9ydGVyIGxpYnJhcnkgZm9yIHlvdT8nLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgd2hlbjogKGFuc3dlcnMpID0+IGFuc3dlcnMucmVwb3J0ZXJzLmxlbmd0aCA+IDBcbn0sIHtcbiAgICB0eXBlOiAnY2hlY2tib3gnLFxuICAgIG5hbWU6ICdzZXJ2aWNlcycsXG4gICAgbWVzc2FnZTogJ0RvIHlvdSB3YW50IHRvIGFkZCBhIHNlcnZpY2UgdG8geW91ciB0ZXN0IHNldHVwPycsXG4gICAgY2hvaWNlczogU1VQUE9SVEVEX1NFUlZJQ0VTLFxuICAgIGZpbHRlcjogZmlsdGVyUGFja2FnZU5hbWUoJ3NlcnZpY2UnKVxufSwge1xuICAgIHR5cGU6ICdjb25maXJtJyxcbiAgICBuYW1lOiAnaW5zdGFsbFNlcnZpY2VzJyxcbiAgICBtZXNzYWdlOiAnU2hhbGwgSSBpbnN0YWxsIHRoZSBzZXJ2aWNlcyBmb3IgeW91PycsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB3aGVuOiAoYW5zd2VycykgPT4gYW5zd2Vycy5zZXJ2aWNlcy5sZW5ndGggPiAwXG59LCB7XG4gICAgdHlwZTogJ2lucHV0JyxcbiAgICBuYW1lOiAnb3V0cHV0RGlyJyxcbiAgICBtZXNzYWdlOiAnSW4gd2hpY2ggZGlyZWN0b3J5IHNob3VsZCB0aGUgeHVuaXQgcmVwb3J0cyBnZXQgc3RvcmVkPycsXG4gICAgZGVmYXVsdDogJy4vJyxcbiAgICB3aGVuOiAoYW5zd2VycykgPT4gYW5zd2Vycy5yZXBvcnRlcnMuaW5jbHVkZXMoJ2p1bml0Jylcbn0sIHtcbiAgICB0eXBlOiAnaW5wdXQnLFxuICAgIG5hbWU6ICdvdXRwdXREaXInLFxuICAgIG1lc3NhZ2U6ICdJbiB3aGljaCBkaXJlY3Rvcnkgc2hvdWxkIHRoZSBqc29uIHJlcG9ydHMgZ2V0IHN0b3JlZD8nLFxuICAgIGRlZmF1bHQ6ICcuLycsXG4gICAgd2hlbjogKGFuc3dlcnMpID0+IGFuc3dlcnMucmVwb3J0ZXJzLmluY2x1ZGVzKCdqc29uJylcbn0sIHtcbiAgICB0eXBlOiAnaW5wdXQnLFxuICAgIG5hbWU6ICdvdXRwdXREaXInLFxuICAgIG1lc3NhZ2U6ICdJbiB3aGljaCBkaXJlY3Rvcnkgc2hvdWxkIHRoZSBtb2NoYXdlc29tZSBqc29uIHJlcG9ydHMgZ2V0IHN0b3JlZD8nLFxuICAgIGRlZmF1bHQ6ICcuLycsXG4gICAgd2hlbjogKGFuc3dlcnMpID0+IGFuc3dlcnMucmVwb3J0ZXJzLmluY2x1ZGVzKCdtb2NoYXdlc29tZScpXG59LCB7XG4gICAgdHlwZTogJ2xpc3QnLFxuICAgIG5hbWU6ICdsb2dMZXZlbCcsXG4gICAgbWVzc2FnZTogJ0xldmVsIG9mIGxvZ2dpbmcgdmVyYm9zaXR5JyxcbiAgICBkZWZhdWx0OiAnaW5mbycsXG4gICAgY2hvaWNlczogTE9HX0xFVkVMU1xufSwge1xuICAgIHR5cGU6ICdpbnB1dCcsXG4gICAgbmFtZTogJ2Jhc2VVcmwnLFxuICAgIG1lc3NhZ2U6ICdXaGF0IGlzIHRoZSBiYXNlIHVybD8nLFxuICAgIGRlZmF1bHQ6ICdodHRwOi8vbG9jYWxob3N0J1xufV1cbiJdfQ==